openapi: 3.0.3
info:
  title: E-ComMercy API
  version: beta 1.4.0
  description: |-
    Generic ecommerce API design for Backend course on Coderhouse
    _create by Allan Reynoso_
    [Github /AllanNara](https://github.com/AllanNara)
  contact:
    email: allannara@outlook.com
    name: Contact me
    url: https://www.linkedin.com/in/allannara
  license:
    name: MIT License
    url: https://github.com/AllanNara/PF-Backend/blob/main/LICENSE.txt
servers:
  - url: http://localhost:8080/api
    description: Local development API
security: []
tags:
  - name: carts
    description: CRUD operations of the user carts
  - name: products
    description: CRUD operations of products
paths:
  /products:
    get:
      parameters:
        - $ref: '#/components/parameters/paginationLimitQuery'
        - $ref: '#/components/parameters/paginationPageQuery'
        - $ref: '#/components/parameters/paginationSortQuery'
        - $ref: '#/components/parameters/paginationQueryQuery'
      tags:
        - products
      operationId: getProducts
      summary: Get products
      description: Retun all products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
        '400':
          description: Page not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    default: Query 'page' is not valid
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    post:
      tags:
        - products
      operationId: addProduct
      summary: Add product
      description: Add new product with unique code
      requestBody:
        $ref: '#/components/requestBodies/new-product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    allOf:
                      - $ref: '#/components/schemas/Product'
                      - type: object
                        properties:
                          id:
                            anyOf:
                              - type: string
                              - type: integer
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Missing fields
        '409':
          description: Code alredy in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Code alredy exists
  /products/{pid}:
    parameters:
      - $ref: '#/components/parameters/productID'
    get:
      tags:
        - products
      operationId: getProductById
      summary: Get product by ID
      description: Return one product, find by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Product with id 14 not found
    put:
      tags:
        - products
      operationId: updateProduct
      summary: Update product
      description: Update properties of product, find by ID
      requestBody:
        $ref: '#/components/requestBodies/update-product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    allOf:
                      - $ref: '#/components/schemas/Product'
                      - type: object
                        properties:
                          id:
                            anyOf:
                              - type: string
                              - type: integer
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Product with id 14 not found
    delete:
      tags:
        - products
      operationId: deleteProduct
      summary: Delete product
      description: Delete product by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Product with id 14 not found
  /carts:
    post:
      tags:
        - carts
      operationId: addCart
      summary: Post new cart
      description: Add new cart for user
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  payload:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: UserID not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    default: UserID is required
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
  /carts/{cid}:
    parameters:
      - $ref: '#/components/parameters/cartID'
    get:
      tags:
        - carts
      operationId: getCartById
      summary: Get cart
      description: Get user cart by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Cart with id 3 not found
    put:
      tags:
        - carts
      operationId: updateEntireCart
      summary: Update entire cart
      description: Update entire user cart, with products in body
      requestBody:
        description: Array of products and quantities
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                      quantity:
                        type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Cart with id 3 not found
    delete:
      tags:
        - carts
      operationId: emptyCart
      summary: Empty user cart
      description: Clean all products from cart with a specific id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    example: Cart with id 3 not found
  /carts/{cid}/product/{pid}:
    parameters:
      - $ref: '#/components/parameters/cartID'
      - $ref: '#/components/parameters/productID'
    post:
      tags:
        - carts
      operationId: addProductoToCart
      summary: Add product to cart
      description: Add existing product to user cart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    anyOf:
                      - example: Cart with id 3 not found
                      - example: Product with id 14 not found
    put:
      tags:
        - carts
      operationId: updateCartProduct
      summary: Update cart product
      description: Update quantity of specific cart product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
              required:
                - quantity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    anyOf:
                      - example: Cart with id 3 not found
                      - example: Product with id 14 not found
    delete:
      tags:
        - carts
      operationId: deleteCartProduct
      summary: Delete cart product
      description: Delete specific product from user cart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  payload:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
                    anyOf:
                      - example: Cart with id 3 not found
                      - example: Product with id 14 not found
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          readOnly: true
          anyOf:
            - type: string
            - type: integer
        title:
          type: string
        description:
          type: string
        code:
          type: string
        price:
          type: number
        stock:
          type: integer
        category:
          type: string
        status:
          type: boolean
        thumbnails:
          type: array
          items:
            type: string
    Pagination:
      type: object
      properties:
        status:
          type: string
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        totalPages:
          type: integer
        page:
          type: integer
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: string
          nullable: true
        nextPage:
          type: string
          nullable: true
        prevLink:
          type: string
          nullable: true
        nextLink:
          type: string
          nullable: true
    Cart:
      type: object
      properties:
        id:
          readOnly: true
          anyOf:
            - type: string
            - type: integer
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
  requestBodies:
    new-product:
      required: true
      description: Fields to complete for new product, code must unique
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
            required:
              - title
              - description
              - code
              - price
              - stock
              - category
    update-product:
      required: true
      description: Fields to update
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
  parameters:
    paginationLimitQuery:
      name: limit
      in: query
      schema:
        type: integer
      description: Limit of products per page
    paginationPageQuery:
      name: page
      in: query
      schema:
        type: integer
      description: Get specific page
    paginationSortQuery:
      name: sort
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
      description: Sort results by price
    paginationQueryQuery:
      name: query
      in: query
      schema:
        type: string
      description: Applied filters
      examples:
        byCategory:
          value: '{"category": "n/a"}'
        byAvailability:
          value: '{"status": true}'
    cartID:
      name: cid
      in: path
      schema:
        anyOf:
          - type: string
          - type: number
      required: true
      description: Cart ID
    productID:
      name: pid
      in: path
      schema:
        anyOf:
          - type: string
          - type: number
      required: true
      description: Product ID
