openapi: 3.0.3
info:
  title: E-ComMercy API
  version: beta 1.4.0
  description: |-
    Generic ecommerce API design for Backend course on Coderhouse
    _create by Allan Reynoso_
    [Github /AllanNara](https://github.com/AllanNara)
  contact:
    email: allannara@outlook.com
    name: Contact me
    url: https://www.linkedin.com/in/allannara
  license:
    name: MIT License
    url: https://github.com/AllanNara/PF-Backend/blob/main/LICENSE.txt
servers:
  - url: http://localhost:8080/api
    description: Local development API
security: []
tags:
  - name: products
    description: CRUD operations of products
  - name: carts
    description: CRUD operations of the user carts
paths:
  /products:
    get:
      parameters:
        - $ref: '#/components/parameters/PaginationLimitQuery'
        - $ref: '#/components/parameters/PaginationPageQuery'
        - $ref: '#/components/parameters/PaginationSortQuery'
        - $ref: '#/components/parameters/PaginationQueryQuery'
      tags:
        - products
      operationId: getProducts
      summary: Get products
      description: Retun all products
      responses:
        '200':
          $ref: '#/components/responses/PaginationRes'
        '500':
          $ref: '#/components/responses/Default'
    post:
      tags:
        - products
      operationId: addProduct
      summary: Add product
      description: Add new product with unique code
      requestBody:
        $ref: '#/components/requestBodies/NewProduct'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulProductOperation'
        '400':
          $ref: '#/components/responses/MissingFieldsInProduct'
        '409':
          $ref: '#/components/responses/CodeAlreadyInUse'
  /products/{pid}:
    parameters:
      - $ref: '#/components/parameters/ProductID'
    get:
      tags:
        - products
      operationId: getProductById
      summary: Get product by ID
      description: Return one product, find by ID
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulProductOperation'
        '404':
          $ref: '#/components/responses/ProductNotFound'
    put:
      tags:
        - products
      operationId: updateProduct
      summary: Update product
      description: Update properties of product, find by ID
      requestBody:
        $ref: '#/components/requestBodies/UpdateProduct'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulProductOperation'
        '404':
          $ref: '#/components/responses/ProductNotFound'
    delete:
      tags:
        - products
      operationId: deleteProduct
      summary: Delete product
      description: Delete product by ID
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulProductOperation'
        '404':
          $ref: '#/components/responses/ProductNotFound'
  /carts:
    post:
      tags:
        - carts
      operationId: addCart
      summary: Post new cart
      description: Add new cart for user
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '500':
          $ref: '#/components/responses/Default'
  /carts/{cid}:
    parameters:
      - $ref: '#/components/parameters/CartID'
    get:
      tags:
        - carts
      operationId: getCartById
      summary: Get cart
      description: Get user cart by ID
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '404':
          $ref: '#/components/responses/CartNotFound'
    put:
      tags:
        - carts
      operationId: updateEntireCart
      summary: Update entire cart
      description: Update entire user cart, with products in body
      requestBody:
        $ref: '#/components/requestBodies/UpdateCart'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '404':
          $ref: '#/components/responses/CartNotFound'
    delete:
      tags:
        - carts
      operationId: emptyCart
      summary: Empty user cart
      description: Clean all products from cart with a specific id
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '404':
          $ref: '#/components/responses/CartNotFound'
  /carts/{cid}/product/{pid}:
    parameters:
      - $ref: '#/components/parameters/CartID'
      - $ref: '#/components/parameters/ProductID'
    post:
      tags:
        - carts
      operationId: addProductoToCart
      summary: Add product to cart
      description: Add existing product to user cart
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '404':
          $ref: '#/components/responses/CartOrProductNotFound'
    put:
      tags:
        - carts
      operationId: updateCartProduct
      summary: Update cart product
      description: Update quantity of specific cart product
      requestBody:
        $ref: '#/components/requestBodies/UpdateCartProduct'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '404':
          $ref: '#/components/responses/CartOrProductNotFound'
    delete:
      tags:
        - carts
      operationId: deleteCartProduct
      summary: Delete cart product
      description: Delete specific product from user cart
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulCartOperation'
        '404':
          $ref: '#/components/responses/CartOrProductNotFound'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          readOnly: true
          anyOf:
            - type: string
            - type: integer
        title:
          type: string
        description:
          type: string
        code:
          type: string
        price:
          type: number
        stock:
          type: integer
        category:
          type: string
        status:
          type: boolean
        thumbnails:
          type: array
          items:
            type: string
    Pagination:
      type: object
      properties:
        status:
          type: string
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        totalPages:
          type: integer
        page:
          type: integer
        hasPrevPage:
          type: boolean
        hasNextPage:
          type: boolean
        prevPage:
          type: integer
          nullable: true
        nextPage:
          type: integer
          nullable: true
        prevLink:
          type: string
          nullable: true
        nextLink:
          type: string
          nullable: true
    Cart:
      type: object
      properties:
        id:
          readOnly: true
          anyOf:
            - type: string
            - type: integer
        products:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/Product'
              quantity:
                type: integer
                default: 1
          default: []
    ErrorRequest:
      type: object
      properties:
        status:
          type: string
          default: error
        message:
          type: string
          default: Internal Server Error
    SuccessRequest:
      type: object
      properties:
        status:
          type: string
          default: success
        payload:
          type: object
  requestBodies:
    NewProduct:
      required: true
      description: Fields to complete for new product, code must unique
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
            required:
              - title
              - description
              - code
              - price
              - stock
              - category
          examples:
            ValuesForm:
              $ref: '#/components/examples/FormAddProduct'
    UpdateProduct:
      required: true
      description: Fields to update
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    UpdateCart:
      required: true
      description: Array of products and quantities
      content:
        application/json:
          schema:
            type: object
            properties:
              products:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      anyOf:
                        - type: string
                        - type: integer
                    quantity:
                      type: integer
    UpdateCartProduct:
      required: true
      description: Update quantity of cart product
      content:
        application/json:
          schema:
            type: object
            properties:
              quantity:
                type: integer
            required:
              - quantity
  parameters:
    PaginationLimitQuery:
      name: limit
      in: query
      schema:
        type: integer
      description: Limit of products per page
    PaginationPageQuery:
      name: page
      in: query
      schema:
        type: integer
      description: Get specific page
    PaginationSortQuery:
      name: sort
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
      description: Sort results by price
    PaginationQueryQuery:
      name: query
      in: query
      schema:
        type: string
      description: Applied filters
      examples:
        byCategory:
          value: '{"category": "n/a"}'
        byAvailability:
          value: '{"status": true}'
    CartID:
      name: cid
      in: path
      schema:
        anyOf:
          - type: string
          - type: number
      required: true
      description: Cart ID
    ProductID:
      name: pid
      in: path
      schema:
        anyOf:
          - type: string
          - type: number
      required: true
      description: Product ID
  responses:
    PaginationRes:
      description: Get all products with pagination system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pagination'
          examples:
            AutoInc:
              $ref: '#/components/examples/PaginationExample'
            ObjectId:
              $ref: '#/components/examples/PaginationExampleMongo'
    SuccessfulCartOperation:
      description: Successful Cart Operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SuccessRequest'
              - type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/Cart'
    SuccessfulProductOperation:
      description: Successful Product Operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SuccessRequest'
              - type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/Product'
          examples:
            AutoincID:
              $ref: '#/components/examples/Product_AutoincID'
            MongoID:
              $ref: '#/components/examples/Product_MongoID'
    CartOrProductNotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRequest'
          examples:
            CartNotFound:
              summary: Cart not found
              value:
                status: error
                message: Cart with id {cid} not found
            ProductNotFound:
              summary: Product not found
              value:
                status: error
                message: Product with id {pid} not found
    CartNotFound:
      description: The specified cart was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRequest'
          example:
            status: error
            message: Cart with id {cid} not found
    ProductNotFound:
      description: The specified product was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRequest'
          example:
            status: error
            message: Product with id {pid} not found
    MissingFieldsInProduct:
      description: Missing fields in product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRequest'
          example:
            status: error
            message: Missing fields
    CodeAlreadyInUse:
      description: Code already in use
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRequest'
          example:
            status: error
            message: Code alredy exists
    Default:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRequest'
  examples:
    PaginationExample:
      description: Pagination with queries
      summary: Pagination Example
      value:
        status: success
        payload:
          - id: 9
            title: Scallops - 10/20
            description: Maecenas tristique, est et tempus semper, est quam pharetra magna, ac consequat metus sapien ut nunc. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti.Nullam porttitor lacus at turpis. Donec posuere metus vitae ipsum. Aliquam non mauris.
            category: Technology
            code: 77-0114118
            price: 4925.3
            stock: 99
            status: true
            thumbnails:
              - thumbnails-1720136534154-809841615.jpg
              - thumbnails-1720136534155-190595448.jpg
          - id: 7
            title: Jam - Apricot
            description: Vestibulum ac est lacinia nisi venenatis tristique. Fusce congue, diam id ornare imperdiet, sapien urna pretium nisl, ut volutpat sapien arcu sed augue. Aliquam erat volutpat.
            category: Consumer Services
            code: 81-5776409
            price: 4915.82
            stock: 62
            status: true
            thumbnails:
              - thumbnails-1720136534154-809841515.jpg
          - id: 8
            title: Beef - Kobe Striploin
            description: Donec diam neque, vestibulum eget, vulputate ut, ultrices vel, augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec pharetra, magna vestibulum aliquet ultrices, erat tortor sollicitudin mi, sit amet lobortis sapien sapien non mi. Integer ac neque.Duis bibendum. Morbi non quam nec dui luctus rutrum. Nulla tellus.
            category: Basic Industries
            code: 99-5624896
            price: 4914.9
            stock: 40
            status: true
            thumbnails: []
        totalPages: 168
        page: 3
        hasPrevPage: true
        hasNextPage: true
        prevPage: 2
        nextPage: 4
        prevLink: http://localhost:8080/api/products?page=2&limit=3&sort=desc
        nextLink: http://localhost:8080/api/products?page=4&limit=3&sort=desc
    PaginationExampleMongo:
      description: Pagination with queries and ObjectId from Mongo
      summary: Pagination Example (MongoDB)
      value:
        status: success
        payload:
          - title: Scallops - 10/20
            description: Maecenas tristique, est et tempus semper, est quam pharetra magna, ac consequat metus sapien ut nunc. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti.Nullam porttitor lacus at turpis. Donec posuere metus vitae ipsum. Aliquam non mauris.
            category: Technology
            code: 77-0114118
            price: 4925.3
            stock: 99
            status: true
            thumbnails:
              - thumbnails-1720136534154-809841615.jpg
              - thumbnails-1720136534155-190595448.jpg
            id: 668f8aee828c67e10cff50f9
          - title: Jam - Apricot
            description: Vestibulum ac est lacinia nisi venenatis tristique. Fusce congue, diam id ornare imperdiet, sapien urna pretium nisl, ut volutpat sapien arcu sed augue. Aliquam erat volutpat.
            category: Consumer Services
            code: 81-5776409
            price: 4915.82
            stock: 62
            status: true
            thumbnails:
              - thumbnails-1720136534154-809841515.jpg
            id: 668f8aee828c67e10cff5054
          - title: Beef - Kobe Striploin
            description: Donec diam neque, vestibulum eget, vulputate ut, ultrices vel, augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec pharetra, magna vestibulum aliquet ultrices, erat tortor sollicitudin mi, sit amet lobortis sapien sapien non mi. Integer ac neque.Duis bibendum. Morbi non quam nec dui luctus rutrum. Nulla tellus.
            category: Basic Industries
            code: 99-5624896
            price: 4914.9
            stock: 40
            status: true
            thumbnails: []
            id: 668f8aee828c67e10cff50af
        totalPages: 168
        page: 3
        hasPrevPage: true
        hasNextPage: true
        prevPage: 2
        nextPage: 4
        prevLink: http://localhost:8080/api/products?page=2&limit=3&sort=desc
        nextLink: http://localhost:8080/api/products?page=4&limit=3&sort=desc
    FormAddProduct:
      description: Values from form
      summary: body add product
      value:
        title: Banana
        description: Velit aliqua quis ut et quis officia pariatur voluptate ad dolore. Veniam labore anim velit proident nisi. Commodo officia consequat eiusmod laborum sit dolor.Donec diam neque, vestibulum eget, vulputate ut, ultrices vel, augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices.
        code: 87-1589139
        price: 5
        stock: 25
        category: Fruit
    Product_AutoincID:
      description: Example response with auto-increment Id
      summary: Autoinc ID
      value:
        status: success
        payload:
          id: 3
          title: Banana
          description: Velit aliqua quis ut et quis officia pariatur voluptate ad dolore. Veniam labore anim velit proident nisi. Commodo officia consequat eiusmod laborum sit dolor.Donec diam neque, vestibulum eget, vulputate ut, ultrices vel, augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices.
          code: 87-1589139
          price: 5
          stock: 25
          category: Fruit
          status: true
          thumbnails:
            - thumbnails-1720136434155-190595448.jpg
            - thumbnails-1720136134155-498486607.jpg
    Product_MongoID:
      description: Example response with ObjectId from Mongo
      summary: ObjectId(MongoDB)
      value:
        status: success
        payload:
          title: Banana
          description: Velit aliqua quis ut et quis officia pariatur voluptate ad dolore. Veniam labore anim velit proident nisi. Commodo officia consequat eiusmod laborum sit dolor.Donec diam neque, vestibulum eget, vulputate ut, ultrices vel, augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices.
          code: 87-1589139
          price: 5
          stock: 25
          category: Fruit
          status: true
          thumbnails:
            - thumbnails-1720136434155-190595448.jpg
            - thumbnails-1720136134155-498486607.jpg
          id: 668f8aee822c67e10cff4f7f
